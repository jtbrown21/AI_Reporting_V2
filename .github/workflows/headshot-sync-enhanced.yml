name: Headshot Sync with Enhanced Monitoring

on:
  schedule:
    # Run every Monday at 6:00 AM UTC
    - cron: '0 6 * * 1'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all headshots (ignore cache)'
        required: false
        default: 'false'
        type: boolean

jobs:
  sync-headshots:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run headshot sync
      id: sync
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        GITHUB_REPO: jtbrown21/AI_Monthly_Reporting_Reports
        FORCE_UPDATE: ${{ github.event.inputs.force_update }}
      run: |
        echo "Starting headshot sync..."
        if python scripts/headshot_sync.py; then
          echo "sync_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Headshot sync completed successfully"
        else
          echo "sync_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Headshot sync failed"
          exit 1
        fi
    
    - name: Run status check
      id: status
      if: always()
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        GITHUB_REPO: jtbrown21/AI_Monthly_Reporting_Reports
      run: |
        echo "Checking headshot status..."
        if python scripts/check_headshot_status.py; then
          echo "status_check=healthy" >> $GITHUB_OUTPUT
        else
          echo "status_check=unhealthy" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: headshot-sync-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Generate summary
      if: always()
      run: |
        echo "## üì∏ Headshot Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Sync Status**: ${{ steps.sync.outputs.sync_success == 'true' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: ${{ steps.status.outputs.status_check == 'healthy' && '‚úÖ Healthy' || '‚ö†Ô∏è Needs attention' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Logs**: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/headshot_sync_$(date +%Y%m%d).log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Recent Log Entries" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 20 "logs/headshot_sync_$(date +%Y%m%d).log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = 'üö® Weekly Headshot Sync Failed';
          const body = `
          ## Headshot Sync Failure Report
          
          **Date**: ${new Date().toISOString().split('T')[0]}
          **Run ID**: ${context.runId}
          **Workflow**: [View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ### üîç Investigation Steps
          1. Check the workflow logs for specific error messages
          2. Verify Airtable API connectivity
          3. Verify GitHub API permissions
          4. Check if any environment variables are missing
          
          ### üîß Quick Fixes
          - Re-run the workflow manually from the Actions tab
          - Check if secrets are properly configured
          - Ensure the repository has proper permissions
          
          This issue was automatically created by the headshot sync workflow.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'headshot-sync', 'automated']
          });
    
    - name: Comment on success after previous failure
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          // Find open issues about headshot sync failures
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'headshot-sync,automated',
            state: 'open'
          });
          
          // Comment on and close recent failure issues
          for (const issue of issues.data) {
            if (issue.title.includes('Headshot Sync Failed')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `‚úÖ **Headshot sync is now working!**\n\nThe sync completed successfully on ${new Date().toISOString().split('T')[0]}.\n\n[View successful run](${context.payload.repository.html_url}/actions/runs/${context.runId})`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
          }
